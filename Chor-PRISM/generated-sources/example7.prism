mdp
const double p;

module phil1

phil1 : [0..6] init 0;
varModule1 : bool;

[] (phil1=0) -> 1 : (phil1'=0) + 1 : (phil1'=1);
[] (phil1=1) -> 0.5 : (phil1'=2) + 0.5 : (phil1'=4);
[] (phil1=2)&(lfree) -> 1 : (phil1'=3);
[] (phil1=3)&(rfree) -> 1 : (phil1'=4);
[] (phil1=4) -> 1 : (phil1'=0);
[] (phil1=3)&!(rfree) -> 1 : (phil1'=6);

[] (phil1=2)&!(lfree) -> 1 : (phil1'=6);

[] (phil1=2)&(rfree) -> 1 : (phil1'=3);
[] (phil1=3)&(lfree) -> 1 : (phil1'=4);
[] (phil1=4) -> 1 : (phil1'=0);
[] (phil1=3)&!(lfree) -> 1 : (phil1'=6);

[] (phil1=2)&!(rfree) -> 1 : (phil1'=6);


endmodule

module phil2

phil2 : [0..6] init 0;
varModule2 : bool;

[] (phil2=0) -> 1 : (phil2'=0) + 1 : (phil2'=2);
[] (phil2=0) -> 0.5 : (phil2'=1) + 0.5 : (phil2'=4);
[] (phil2=2)&(lfree) -> 1 : (phil2'=3);
[] (phil2=3)&(rfree) -> 1 : (phil2'=4);
[] (phil2=4) -> 1 : (phil2'=0);
[] (phil2=3)&!(rfree) -> 1 : (phil2'=6);

[] (phil2=2)&!(lfree) -> 1 : (phil2'=6);

[] (phil2=2)&(rfree) -> 1 : (phil2'=3);
[] (phil2=3)&(lfree) -> 1 : (phil2'=4);
[] (phil2=4) -> 1 : (phil2'=0);
[] (phil2=3)&!(lfree) -> 1 : (phil2'=6);

[] (phil2=2)&!(rfree) -> 1 : (phil2'=6);


endmodule

module phil3

phil3 : [0..6] init 0;
varModule3 : bool;

[] (phil3=0) -> 1 : (phil3'=0) + 1 : (phil3'=2);
[] (phil3=0) -> 0.5 : (phil3'=1) + 0.5 : (phil3'=4);
[] (phil3=2)&(lfree) -> 1 : (phil3'=3);
[] (phil3=3)&(rfree) -> 1 : (phil3'=4);
[] (phil3=4) -> 1 : (phil3'=0);
[] (phil3=3)&!(rfree) -> 1 : (phil3'=6);

[] (phil3=2)&!(lfree) -> 1 : (phil3'=6);

[] (phil3=2)&(rfree) -> 1 : (phil3'=3);
[] (phil3=3)&(lfree) -> 1 : (phil3'=4);
[] (phil3=4) -> 1 : (phil3'=0);
[] (phil3=3)&!(lfree) -> 1 : (phil3'=6);

[] (phil3=2)&!(rfree) -> 1 : (phil3'=6);


endmodule

