ctmc
const int EpochSize = 2;
const k = 1;
const double rMw = 1/12.6;
const epochs = 0;
const double T;
const int N = 100;
const double rC = 1/(14*EpochSize);
const double mR =1/14;
const double hR = 10;

module Validator1
Validator1 : [0..7] init 0;
b1 : block {m1,0;genesis,0}; 
lastJ1 : block {m1,0;genesis,0}; 
L1 : blockchain [{genesis,0;genesis,0}]; 
c1 : [0..N] init 0; 
setMiner1 : list []; 
heightCheckpoint1 : [0..N] init 0; 
heightLast1 : [0..N] init 0; 
lastFinalized1 : block {genesis,0;genesis,0}; 
lastJustified1 : block {genesis,0;genesis,0}; 
lastCheck1 : block {genesis,0;genesis,0}; 
votes1 : [0..1000] init 0; 
listCheckpoints1 : list []; 


[] (Validator1=0)  -> mR : (b1'=createB(b1,L1,c1))&(c1'=c1+1)&(Validator1'=1); 
[] (Validator1=0)  -> hR :  (Validator1'=2); 
[] (Validator1=0)  -> rC : (lastCheck1'=extractCheckpoint(listCheckpoints1,lastCheck1))&(heightLast1'=getHeight(extractCheckpoint(listCheckpoints1,lastCheck1)))&(votes1'=calcVotes(Votes,extractCheckpoint(listCheckpoints1,lastCheck1)))&(Validator1'=3); 




[CAWGG] (Validator1=1)&!(mod(getHeight(b1),EpochSize)=0)  -> 1 : (L1'=addBlock(L1,b1))&(Validator1'=0); 

[] (Validator1=1)&!(!(mod(getHeight(b1),EpochSize)=0)) -> 1 : (Validator1'=3); 

[TJVLU] (Validator1=1)&!(mod(getHeight(b1),EpochSize)=0)  -> 1 :  (Validator1'=0); 

[] (Validator1=2)&!isEmpty(set1) -> 1 : (b1'=extractBlock(set1))&(Validator1'=4); 

[] (Validator1=4)&!canBeInserted(L1,b1) -> (Validator1'=0);

[] (Validator1=4)&!(!canBeInserted(L1,b1)) -> 1 : (Validator1'=6); 

[SOCSO] (Validator1=6)  -> 1 : (setMiner1' = addBlockSet(setMiner1 , b1))&(Validator1'=8); 

[] (Validator1=7)&!(mod(getHeight(b1),EpochSize)=0) -> (Validator1'=0);

[] (Validator1=7)&!(!(mod(getHeight(b1),EpochSize)=0)) -> 1 : (Validator1'=9); 

[UMVMR] (Validator1=9)  -> 1 :  (Validator1'=0); 

[] (Validator1=2)&!(!isEmpty(set1)) -> 1 : (Validator1'=0);

[] (Validator1=3)&(heightLast1=heightCheckpoint1+EpochSize)&(votes1>=2/3*tot_stake) -> (Validator1'=4);

[] (Validator1=4)&(heightLast1=heightCheckpoint1+EpochSize) -> 1 : (lastJ1'=b1)&(L1'= updateHF(L1,lastJ1))&(Validator1'=6); 

[LQFTH] (Validator1=6)  -> 1 :  (Validator1'=0); 

[] (Validator1=4)&!((heightLast1=heightCheckpoint1+EpochSize)) -> 1 : (lastJ1'=b1)&(Validator1'=0); 

[] (Validator1=3)&!((heightLast1=heightCheckpoint1+EpochSize)&(votes1>=2/3*tot_stake)) -> 1 : (Validator1'=0);
endmodule


module Validator2
Validator2 : [0..7] init 0;
b2 : block {m2,0;genesis,0}; 
lastJ2 : block {m2,0;genesis,0}; 
L2 : blockchain [{genesis,0;genesis,0}]; 
c2 : [0..N] init 0; 
setMiner2 : list []; 
heightCheckpoint2 : [0..N] init 0; 
heightLast2 : [0..N] init 0; 
lastFinalized2 : block {genesis,0;genesis,0}; 
lastJustified2 : block {genesis,0;genesis,0}; 
lastCheck2 : block {genesis,0;genesis,0}; 
votes2 : [0..1000] init 0; 
listCheckpoints2 : list []; 


[] (Validator2=0)  -> mR : (b2'=createB(b2,L2,c2))&(c2'=c2+1)&(Validator2'=1); 
[] (Validator2=0)  -> hR :  (Validator2'=2); 
[] (Validator2=0)  -> rC : (lastCheck2'=extractCheckpoint(listCheckpoints2,lastCheck2))&(heightLast2'=getHeight(extractCheckpoint(listCheckpoints2,lastCheck2)))&(votes2'=calcVotes(Votes,extractCheckpoint(listCheckpoints2,lastCheck2)))&(Validator2'=3); 




[THDGL] (Validator2=1)&!(mod(getHeight(b2),EpochSize)=0)  -> 1 : (L2'=addBlock(L2,b2))&(Validator2'=0); 

[] (Validator2=1)&!(!(mod(getHeight(b2),EpochSize)=0)) -> 1 : (Validator2'=3); 

[XPQBW] (Validator2=1)&!(mod(getHeight(b2),EpochSize)=0)  -> 1 :  (Validator2'=0); 

[] (Validator2=2)&!isEmpty(set2) -> 1 : (b2'=extractBlock(set2))&(Validator2'=4); 

[] (Validator2=4)&!canBeInserted(L2,b2) -> (Validator2'=0);

[] (Validator2=4)&!(!canBeInserted(L2,b2)) -> 1 : (Validator2'=6); 

[NARTF] (Validator2=6)  -> 1 : (setMiner2' = addBlockSet(setMiner2 , b2))&(Validator2'=8); 

[] (Validator2=7)&!(mod(getHeight(b2),EpochSize)=0) -> (Validator2'=0);

[] (Validator2=7)&!(!(mod(getHeight(b2),EpochSize)=0)) -> 1 : (Validator2'=9); 

[EEZHK] (Validator2=9)  -> 1 :  (Validator2'=0); 

[] (Validator2=2)&!(!isEmpty(set2)) -> 1 : (Validator2'=0);

[] (Validator2=3)&(heightLast2=heightCheckpoint2+EpochSize)&(votes2>=2/3*tot_stake) -> (Validator2'=4);

[] (Validator2=4)&(heightLast2=heightCheckpoint2+EpochSize) -> 1 : (lastJ2'=b2)&(L2'= updateHF(L2,lastJ2))&(Validator2'=6); 

[EQBWK] (Validator2=6)  -> 1 :  (Validator2'=0); 

[] (Validator2=4)&!((heightLast2=heightCheckpoint2+EpochSize)) -> 1 : (lastJ2'=b2)&(Validator2'=0); 

[] (Validator2=3)&!((heightLast2=heightCheckpoint2+EpochSize)&(votes2>=2/3*tot_stake)) -> 1 : (Validator2'=0);
endmodule


module Validator3
Validator3 : [0..7] init 0;
b3 : block {m3,0;genesis,0}; 
lastJ3 : block {m3,0;genesis,0}; 
L3 : blockchain [{genesis,0;genesis,0}]; 
c3 : [0..N] init 0; 
setMiner3 : list []; 
heightCheckpoint3 : [0..N] init 0; 
heightLast3 : [0..N] init 0; 
lastFinalized3 : block {genesis,0;genesis,0}; 
lastJustified3 : block {genesis,0;genesis,0}; 
lastCheck3 : block {genesis,0;genesis,0}; 
votes3 : [0..1000] init 0; 
listCheckpoints3 : list []; 


[] (Validator3=0)  -> mR : (b3'=createB(b3,L3,c3))&(c3'=c3+1)&(Validator3'=1); 
[] (Validator3=0)  -> hR :  (Validator3'=2); 
[] (Validator3=0)  -> rC : (lastCheck3'=extractCheckpoint(listCheckpoints3,lastCheck3))&(heightLast3'=getHeight(extractCheckpoint(listCheckpoints3,lastCheck3)))&(votes3'=calcVotes(Votes,extractCheckpoint(listCheckpoints3,lastCheck3)))&(Validator3'=3); 




[VUSMH] (Validator3=1)&!(mod(getHeight(b3),EpochSize)=0)  -> 1 : (L3'=addBlock(L3,b3))&(Validator3'=0); 

[] (Validator3=1)&!(!(mod(getHeight(b3),EpochSize)=0)) -> 1 : (Validator3'=3); 

[NYNER] (Validator3=1)&!(mod(getHeight(b3),EpochSize)=0)  -> 1 :  (Validator3'=0); 

[] (Validator3=2)&!isEmpty(set3) -> 1 : (b3'=extractBlock(set3))&(Validator3'=4); 

[] (Validator3=4)&!canBeInserted(L3,b3) -> (Validator3'=0);

[] (Validator3=4)&!(!canBeInserted(L3,b3)) -> 1 : (Validator3'=6); 

[BPYMA] (Validator3=6)  -> 1 : (setMiner3' = addBlockSet(setMiner3 , b3))&(Validator3'=8); 

[] (Validator3=7)&!(mod(getHeight(b3),EpochSize)=0) -> (Validator3'=0);

[] (Validator3=7)&!(!(mod(getHeight(b3),EpochSize)=0)) -> 1 : (Validator3'=9); 

[RMRBM] (Validator3=9)  -> 1 :  (Validator3'=0); 

[] (Validator3=2)&!(!isEmpty(set3)) -> 1 : (Validator3'=0);

[] (Validator3=3)&(heightLast3=heightCheckpoint3+EpochSize)&(votes3>=2/3*tot_stake) -> (Validator3'=4);

[] (Validator3=4)&(heightLast3=heightCheckpoint3+EpochSize) -> 1 : (lastJ3'=b3)&(L3'= updateHF(L3,lastJ3))&(Validator3'=6); 

[BLQTO] (Validator3=6)  -> 1 :  (Validator3'=0); 

[] (Validator3=4)&!((heightLast3=heightCheckpoint3+EpochSize)) -> 1 : (lastJ3'=b3)&(Validator3'=0); 

[] (Validator3=3)&!((heightLast3=heightCheckpoint3+EpochSize)&(votes3>=2/3*tot_stake)) -> 1 : (Validator3'=0);
endmodule


module Validator4
Validator4 : [0..7] init 0;
b4 : block {m4,0;genesis,0}; 
lastJ4 : block {m4,0;genesis,0}; 
L4 : blockchain [{genesis,0;genesis,0}]; 
c4 : [0..N] init 0; 
setMiner4 : list []; 
heightCheckpoint4 : [0..N] init 0; 
heightLast4 : [0..N] init 0; 
lastFinalized4 : block {genesis,0;genesis,0}; 
lastJustified4 : block {genesis,0;genesis,0}; 
lastCheck4 : block {genesis,0;genesis,0}; 
votes4 : [0..1000] init 0; 
listCheckpoints4 : list []; 


[] (Validator4=0)  -> mR : (b4'=createB(b4,L4,c4))&(c4'=c4+1)&(Validator4'=1); 
[] (Validator4=0)  -> hR :  (Validator4'=2); 
[] (Validator4=0)  -> rC : (lastCheck4'=extractCheckpoint(listCheckpoints4,lastCheck4))&(heightLast4'=getHeight(extractCheckpoint(listCheckpoints4,lastCheck4)))&(votes4'=calcVotes(Votes,extractCheckpoint(listCheckpoints4,lastCheck4)))&(Validator4'=3); 




[ACEEP] (Validator4=1)&!(mod(getHeight(b4),EpochSize)=0)  -> 1 : (L4'=addBlock(L4,b4))&(Validator4'=0); 

[] (Validator4=1)&!(!(mod(getHeight(b4),EpochSize)=0)) -> 1 : (Validator4'=3); 

[HQAJG] (Validator4=1)&!(mod(getHeight(b4),EpochSize)=0)  -> 1 :  (Validator4'=0); 

[] (Validator4=2)&!isEmpty(set4) -> 1 : (b4'=extractBlock(set4))&(Validator4'=4); 

[] (Validator4=4)&!canBeInserted(L4,b4) -> (Validator4'=0);

[] (Validator4=4)&!(!canBeInserted(L4,b4)) -> 1 : (Validator4'=6); 

[VNMDF] (Validator4=6)  -> 1 : (setMiner4' = addBlockSet(setMiner4 , b4))&(Validator4'=8); 

[] (Validator4=7)&!(mod(getHeight(b4),EpochSize)=0) -> (Validator4'=0);

[] (Validator4=7)&!(!(mod(getHeight(b4),EpochSize)=0)) -> 1 : (Validator4'=9); 

[OBGHI] (Validator4=9)  -> 1 :  (Validator4'=0); 

[] (Validator4=2)&!(!isEmpty(set4)) -> 1 : (Validator4'=0);

[] (Validator4=3)&(heightLast4=heightCheckpoint4+EpochSize)&(votes4>=2/3*tot_stake) -> (Validator4'=4);

[] (Validator4=4)&(heightLast4=heightCheckpoint4+EpochSize) -> 1 : (lastJ4'=b4)&(L4'= updateHF(L4,lastJ4))&(Validator4'=6); 

[NCXGG] (Validator4=6)  -> 1 :  (Validator4'=0); 

[] (Validator4=4)&!((heightLast4=heightCheckpoint4+EpochSize)) -> 1 : (lastJ4'=b4)&(Validator4'=0); 

[] (Validator4=3)&!((heightLast4=heightCheckpoint4+EpochSize)&(votes4>=2/3*tot_stake)) -> 1 : (Validator4'=0);
endmodule


module Validator5
Validator5 : [0..7] init 0;
b5 : block {m5,0;genesis,0}; 
lastJ5 : block {m5,0;genesis,0}; 
L5 : blockchain [{genesis,0;genesis,0}]; 
c5 : [0..N] init 0; 
setMiner5 : list []; 
heightCheckpoint5 : [0..N] init 0; 
heightLast5 : [0..N] init 0; 
lastFinalized5 : block {genesis,0;genesis,0}; 
lastJustified5 : block {genesis,0;genesis,0}; 
lastCheck5 : block {genesis,0;genesis,0}; 
votes5 : [0..1000] init 0; 
listCheckpoints5 : list []; 


[] (Validator5=0)  -> mR : (b5'=createB(b5,L5,c5))&(c5'=c5+1)&(Validator5'=1); 
[] (Validator5=0)  -> hR :  (Validator5'=2); 
[] (Validator5=0)  -> rC : (lastCheck5'=extractCheckpoint(listCheckpoints5,lastCheck5))&(heightLast5'=getHeight(extractCheckpoint(listCheckpoints5,lastCheck5)))&(votes5'=calcVotes(Votes,extractCheckpoint(listCheckpoints5,lastCheck5)))&(Validator5'=3); 




[IIMUJ] (Validator5=1)&!(mod(getHeight(b5),EpochSize)=0)  -> 1 : (L5'=addBlock(L5,b5))&(Validator5'=0); 

[] (Validator5=1)&!(!(mod(getHeight(b5),EpochSize)=0)) -> 1 : (Validator5'=3); 

[EZUSY] (Validator5=1)&!(mod(getHeight(b5),EpochSize)=0)  -> 1 :  (Validator5'=0); 

[] (Validator5=2)&!isEmpty(set5) -> 1 : (b5'=extractBlock(set5))&(Validator5'=4); 

[] (Validator5=4)&!canBeInserted(L5,b5) -> (Validator5'=0);

[] (Validator5=4)&!(!canBeInserted(L5,b5)) -> 1 : (Validator5'=6); 

[JIDEB] (Validator5=6)  -> 1 : (setMiner5' = addBlockSet(setMiner5 , b5))&(Validator5'=8); 

[] (Validator5=7)&!(mod(getHeight(b5),EpochSize)=0) -> (Validator5'=0);

[] (Validator5=7)&!(!(mod(getHeight(b5),EpochSize)=0)) -> 1 : (Validator5'=9); 

[AYCJI] (Validator5=9)  -> 1 :  (Validator5'=0); 

[] (Validator5=2)&!(!isEmpty(set5)) -> 1 : (Validator5'=0);

[] (Validator5=3)&(heightLast5=heightCheckpoint5+EpochSize)&(votes5>=2/3*tot_stake) -> (Validator5'=4);

[] (Validator5=4)&(heightLast5=heightCheckpoint5+EpochSize) -> 1 : (lastJ5'=b5)&(L5'= updateHF(L5,lastJ5))&(Validator5'=6); 

[KOPQA] (Validator5=6)  -> 1 :  (Validator5'=0); 

[] (Validator5=4)&!((heightLast5=heightCheckpoint5+EpochSize)) -> 1 : (lastJ5'=b5)&(Validator5'=0); 

[] (Validator5=3)&!((heightLast5=heightCheckpoint5+EpochSize)&(votes5>=2/3*tot_stake)) -> 1 : (Validator5'=0);
endmodule


module Network
Network : [0..1] init 0;
set1 : list []; 
set2 : list []; 
set3 : list []; 
set4 : list []; 
set5 : list []; 


[CAWGG] (Network=0)  -> 1 : (set2'=addBlockSet(set2,b2))&(set3'=addBlockSet(set3,b3))&(set4'=addBlockSet(set4,b4))&(set5'=addBlockSet(set5,b5))&(Network'=0);

[SOCSO] (Network=0)  -> 1 : (set1' = removeBlock(set1,b1))&(Network'=0); 

[THDGL] (Network=0)  -> 1 : (set1'=addBlockSet(set1,b1))&(set3'=addBlockSet(set3,b3))&(set4'=addBlockSet(set4,b4))&(set5'=addBlockSet(set5,b5))&(Network'=0);

[NARTF] (Network=0)  -> 1 : (set2' = removeBlock(set2,b2))&(Network'=0); 

[VUSMH] (Network=0)  -> 1 : (set1'=addBlockSet(set1,b1))&(set2'=addBlockSet(set2,b2))&(set4'=addBlockSet(set4,b4))&(set5'=addBlockSet(set5,b5))&(Network'=0);

[BPYMA] (Network=0)  -> 1 : (set3' = removeBlock(set3,b3))&(Network'=0); 

[ACEEP] (Network=0)  -> 1 : (set1'=addBlockSet(set1,b1))&(set2'=addBlockSet(set2,b2))&(set3'=addBlockSet(set3,b3))&(set5'=addBlockSet(set5,b5))&(Network'=0);

[VNMDF] (Network=0)  -> 1 : (set4' = removeBlock(set4,b4))&(Network'=0); 

[IIMUJ] (Network=0)  -> 1 : (set1'=addBlockSet(set1,b1))&(set2'=addBlockSet(set2,b2))&(set3'=addBlockSet(set3,b3))&(set4'=addBlockSet(set4,b4))&(Network'=0);

[JIDEB] (Network=0)  -> 1 : (set5' = removeBlock(set5,b5))&(Network'=0); 
endmodule


module Vote_Manager
Vote_Manager : [0..1] init 0;
Votes : hash [];  
tot_stake : [0..120000] init 50; 
stake1 : [0..N] init 10; 
stake2 : [0..N] init 10; 
stake3 : [0..N] init 10; 
stake4 : [0..N] init 10; 
stake5 : [0..N] init 10; 


[TJVLU] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b1,stake1))&(Vote_Manager'=0);

[UMVMR] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b1,stake1))&(Vote_Manager'=0);

[LQFTH] (Vote_Manager=0)  -> 1 : (epoch'=height(lastF(L1))&(Stakes'=addVote(Votes,b1,stake1))&(Vote_Manager'=0);

[XPQBW] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b2,stake2))&(Vote_Manager'=0);

[EEZHK] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b2,stake2))&(Vote_Manager'=0);

[EQBWK] (Vote_Manager=0)  -> 1 : (epoch'=height(lastF(L2))&(Stakes'=addVote(Votes,b2,stake2))&(Vote_Manager'=0);

[NYNER] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b3,stake3))&(Vote_Manager'=0);

[RMRBM] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b3,stake3))&(Vote_Manager'=0);

[BLQTO] (Vote_Manager=0)  -> 1 : (epoch'=height(lastF(L3))&(Stakes'=addVote(Votes,b3,stake3))&(Vote_Manager'=0);

[HQAJG] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b4,stake4))&(Vote_Manager'=0);

[OBGHI] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b4,stake4))&(Vote_Manager'=0);

[NCXGG] (Vote_Manager=0)  -> 1 : (epoch'=height(lastF(L4))&(Stakes'=addVote(Votes,b4,stake4))&(Vote_Manager'=0);

[EZUSY] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b5,stake5))&(Vote_Manager'=0);

[AYCJI] (Vote_Manager=0)  -> 1 : (Votes'=addVote(Votes,b5,stake5))&(Vote_Manager'=0);

[KOPQA] (Vote_Manager=0)  -> 1 : (epoch'=height(lastF(L5))&(Stakes'=addVote(Votes,b5,stake5))&(Vote_Manager'=0);
endmodule

