mdp
const double p;

module PC

PC : [0..8] init 0;
 

[PONPS] (PC=1) -> 1 : (PC'=8);
[] (PC=0)&(s=1) -> 1 : (PC'=1) + 1 : (PC'=2);
[UEUXB] (PC=2) -> 1 : (PC'=8);
[] (PC=0)&!(s=1) -> 1 : (PC'=8);
[YXBIP] (PC=3) -> 1 : (PC'=8);
[] (PC=1)&(s=2) -> 1 : (PC'=3) + 1 : (PC'=5);
[AQPRC] (PC=5) -> 1 : (PC'=8);
[] (PC=1)&!(s=2) -> 1 : (PC'=8);
[NOVIM] (PC=4) -> 1 : (PC'=8);
[] (PC=3)&(s=3) -> 1 : (PC'=4) + 1 : (PC'=5);
[WTRCR] (PC=5) -> 1 : (PC'=8);
[] (PC=3)&!(s=3) -> 1 : (PC'=8);
[CTLYY] (PC=4) -> 1 : (PC'=8);
[] (PC=3)&(s=1) -> 1 : (PC'=4) + 1 : (PC'=5);
[LDPWX] (PC=5) -> 1 : (PC'=7);
[] (PC=3)&!(s=1) -> 1 : (PC'=8);
[LBCYK] (PC=4) -> 1 : (PC'=8);
[] (PC=3)&(s=2) -> 1 : (PC'=4) + 1 : (PC'=5);
[FDMZT] (PC=5) -> 1 : (PC'=7);
[] (PC=3)&!(s=2) -> 1 : (PC'=8);
[JKEGG] (PC=4) -> 1 : (PC'=8);
[] (PC=3)&(s=0) -> 1 : (PC'=4) + 1 : (PC'=5);
[PLBKS] (PC=5) -> 1 : (PC'=7);
[] (PC=3)&!(s=0) -> 1 : (PC'=8);

endmodule

module Process1

Process1 : [0..5] init 0;
var1 : bool;

[CTLYY] (Process1=1) -> 1 : (var1'=true)&(Process1'=5);
[] (Process1=1) -> (1-p) : (Process1'=2);
[LDPWX] (Process1=2) -> 1 : (var1'=false)&(Process1'=4);
[] (Process1=2)&(PC=6)&!var1&((var1 & varModule1) | (varModule2 & var3))  -> 1 : (var1'=true)&(Process1'=0); 
[] (Process1=2)&!(PC=6)&!var1&((var1 & varModule1) | (varModule2 & var3))  -> 1 : (Process1'=5);

endmodule

module Process2

Process2 : [0..5] init 0;
var2 : bool;

[LBCYK] (Process2=1) -> 1 : (var2'=true)&(Process2'=5);
[] (Process2=1) -> (1-p) : (Process2'=2);
[FDMZT] (Process2=2) -> 1 : (var2'=false)&(Process2'=4);
[] (Process2=2)&(PC=6)&!var2&((var2 & varModule2) | (varModule3 & var1))  -> 1 : (var2'=true)&(Process2'=0); 
[] (Process2=2)&!(PC=6)&!var2&((var2 & varModule2) | (varModule3 & var1))  -> 1 : (Process2'=5);

endmodule

module Process3

Process3 : [0..5] init 0;
var3 : bool;

[JKEGG] (Process3=1) -> 1 : (var3'=true)&(Process3'=5);
[] (Process3=1) -> (1-p) : (Process3'=2);
[PLBKS] (Process3=2) -> 1 : (var3'=false)&(Process3'=4);
[] (Process3=2)&(PC=6)&!var3&((var3 & varModule3) | (varModule1 & var2))  -> 1 : (var3'=true)&(Process3'=0); 
[] (Process3=2)&!(PC=6)&!var3&((var3 & varModule3) | (varModule1 & var2))  -> 1 : (Process3'=5);

endmodule

module Module1

Module1 : [0..4] init 0;
varModule1 : bool;

[PONPS] (Module1=1) -> 1 : (varModule1'=true)&(Module1'=4);
[] (Module1=1) -> (1-p) : (Module1'=2);
[UEUXB] (Module1=2) -> 1 : (varModule1'=false)&(Module1'=4);

endmodule

module Module2

Module2 : [0..4] init 0;
varModule2 : bool;

[YXBIP] (Module2=1) -> 1 : (varModule2'=true)&(Module2'=4);
[] (Module2=1) -> (1-p) : (Module2'=2);
[AQPRC] (Module2=2) -> 1 : (varModule2'=false)&(Module2'=4);

endmodule

module Module3

Module3 : [0..4] init 0;
varModule3 : bool;

[NOVIM] (Module3=1) -> 1 : (varModule3'=true)&(Module3'=4);
[] (Module3=1) -> (1-p) : (Module3'=2);
[WTRCR] (Module3=2) -> 1 : (varModule3'=false)&(Module3'=4);

endmodule

