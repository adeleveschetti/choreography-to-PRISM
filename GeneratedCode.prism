ctmc
const k;
const T=k*1000;
const double rb ;
const double mR = 1/600;
const double lR = 1-mR;
const double hR_1 = 0.33;
const double hR_2 = 0.33;
const double hR_3 = 0.33;
const int N = 100;

module Hasher1

Hasher1_STATE: [0..10] init 0;

[FIIOM] (Hasher1_STATE=0) -> mR :  (Hasher1_STATE'=0);
[DALBZ] (Hasher1_STATE=0) -> lR :  (Hasher1_STATE'=0);

endmodule 

module Hasher2

Hasher2_STATE: [0..10] init 0;

[BXKRQ] (Hasher2_STATE=0) -> mR :  (Hasher2_STATE'=0);
[FPVYY] (Hasher2_STATE=0) -> lR :  (Hasher2_STATE'=0);

endmodule 

module Hasher3

Hasher3_STATE: [0..10] init 0;

[RDHHX] (Hasher3_STATE=0) -> mR :  (Hasher3_STATE'=0);
[ZHEMJ] (Hasher3_STATE=0) -> lR :  (Hasher3_STATE'=0);

endmodule 

module Miner1
b1 : block {m1,0;genesis,0} ;
b1 : blockchain [{genesis,0;genesis,0}];
c1 : [0..N] init 0;
setMiner1 : list [];

Miner1_STATE: [0..10] init 0;

[FIIOM] (Miner1_STATE=0) -> hRi : (b1'=createB(b1,B1,c1))&(c1'=c1+1)&(Miner1_STATE'=1);
[HPLBP] (Miner1_STATE=1) -> rB: (B1'=addBlock(B1,b1))&(Miner1_STATE'=0);
[DALBZ] (Miner1_STATE=0) -> hRi : (Miner1_STATE'=2);
[] (!isEmpty(set1))&(Miner1_STATE=2) -> 1:(b1'=extractBlock(set1))&(Miner1_STATE'=3);
[] !(!isEmpty(set1))&(Miner1_STATE=2) -> 1:(Miner1_STATE'=4);
[DAHAW] (Miner1_STATE=3) -> 1: (setMiner1' = addBlockSet(setMiner1 , b1))&(Miner1_STATE'=0);
[] (isEmpty(setMiner1))&(Miner1_STATE=4) -> 1: (Miner1_STATE'=0);
[] !(isEmpty(setMiner1))&(Miner1_STATE=4) -> 1:(Miner1_STATE'=5);
[] (canBeInserted(B1,b1))&(Miner1_STATE=5) -> 1:(B1'=addBlock(B1,b1))&(setMiner1'=removeBlock(setMiner1,b1))&(Miner1_STATE'=0);
[] !(canBeInserted(B1,b1))&(Miner1_STATE=5) -> 1:(Miner1_STATE'=0);

endmodule 

module Miner2
b2 : block {m2,0;genesis,0} ;
b2 : blockchain [{genesis,0;genesis,0}];
c2 : [0..N] init 0;
setMiner2 : list [];

Miner2_STATE: [0..10] init 0;

[BXKRQ] (Miner2_STATE=0) -> hRi : (b2'=createB(b2,B2,c2))&(c2'=c2+1)&(Miner2_STATE'=1);
[UKLIU] (Miner2_STATE=1) -> rB: (B2'=addBlock(B2,b2))&(Miner2_STATE'=0);
[FPVYY] (Miner2_STATE=0) -> hRi : (Miner2_STATE'=2);
[] (!isEmpty(set1))&(Miner2_STATE=2) -> 1:(b2'=extractBlock(set2))&(Miner2_STATE'=3);
[] !(!isEmpty(set1))&(Miner2_STATE=2) -> 1:(Miner2_STATE'=4);
[EBXNA] (Miner2_STATE=3) -> 1: (setMiner2' = addBlockSet(setMiner2 , b2))&(Miner2_STATE'=0);
[] (isEmpty(setMiner1))&(Miner2_STATE=4) -> 1: (Miner2_STATE'=0);
[] !(isEmpty(setMiner1))&(Miner2_STATE=4) -> 1:(Miner2_STATE'=5);
[] (canBeInserted(B1,b1))&(Miner2_STATE=5) -> 1:(B2'=addBlock(B2,b2))&(setMiner2'=removeBlock(setMiner2,b2))&(Miner2_STATE'=0);
[] !(canBeInserted(B1,b1))&(Miner2_STATE=5) -> 1:(Miner2_STATE'=0);

endmodule 

module Miner3
b3 : block {m3,0;genesis,0} ;
b3 : blockchain [{genesis,0;genesis,0}];
c3 : [0..N] init 0;
setMiner3 : list [];

Miner3_STATE: [0..10] init 0;

[RDHHX] (Miner3_STATE=0) -> hRi : (b3'=createB(b3,B3,c3))&(c3'=c3+1)&(Miner3_STATE'=1);
[ADZWF] (Miner3_STATE=1) -> rB: (B3'=addBlock(B3,b3))&(Miner3_STATE'=0);
[ZHEMJ] (Miner3_STATE=0) -> hRi : (Miner3_STATE'=2);
[] (!isEmpty(set1))&(Miner3_STATE=2) -> 1:(b3'=extractBlock(set3))&(Miner3_STATE'=3);
[] !(!isEmpty(set1))&(Miner3_STATE=2) -> 1:(Miner3_STATE'=4);
[OTQMG] (Miner3_STATE=3) -> 1: (setMiner3' = addBlockSet(setMiner3 , b3))&(Miner3_STATE'=0);
[] (isEmpty(setMiner1))&(Miner3_STATE=4) -> 1: (Miner3_STATE'=0);
[] !(isEmpty(setMiner1))&(Miner3_STATE=4) -> 1:(Miner3_STATE'=5);
[] (canBeInserted(B1,b1))&(Miner3_STATE=5) -> 1:(B3'=addBlock(B3,b3))&(setMiner3'=removeBlock(setMiner3,b3))&(Miner3_STATE'=0);
[] !(canBeInserted(B1,b1))&(Miner3_STATE=5) -> 1:(Miner3_STATE'=0);

endmodule 

module Network
set1 : list [];
set2 : list [];
set3 : list [];

Network_STATE: [0..10] init 0;

[HPLBP] (Network_STATE=0) -> 1:  (set2'=addBlockSet(set2,b1))&(set3'=addBlockSet(set3,b1))&&(Network_STATE'=0);
[DAHAW] (Network_STATE=0) -> 1: (set1' = removeBlock(set1,b1))&(Network_STATE'=0);
[UKLIU] (Network_STATE=0) -> 1:  (set1'=addBlockSet(set1,b2))&(set3'=addBlockSet(set3,b2))&&(Network_STATE'=0);
[EBXNA] (Network_STATE=0) -> 1: (set2' = removeBlock(set2,b2))&(Network_STATE'=0);
[ADZWF] (Network_STATE=0) -> 1:  (set1'=addBlockSet(set1,b3))&(set2'=addBlockSet(set2,b3))&&(Network_STATE'=0);
[OTQMG] (Network_STATE=0) -> 1: (set3' = removeBlock(set3,b3))&(Network_STATE'=0);

endmodule 

