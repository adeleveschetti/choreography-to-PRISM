ctmc
const k;
const T=k*1000;
const double rb ;
const double mR = 1/600;
const double lR = 1-mR;
const double hR_1 = 0.33;
const double hR_2 = 0.33;
const double hR_3 = 0.33;
const int N = 100;

module Hasher1

Hasher1_STATE: [0..10] init 0;

[USZNO] (Hasher1_STATE=0) -> mR : (Hasher1_STATE'=0);
[QFHZI] (Hasher1_STATE=0) -> lR : (Hasher1_STATE'=0);

endmodule 

module Hasher2

Hasher2_STATE: [0..10] init 0;

[PWWZM] (Hasher2_STATE=0) -> mR : (Hasher2_STATE'=0);
[KPDQZ] (Hasher2_STATE=0) -> lR : (Hasher2_STATE'=0);

endmodule 

module Hasher3

Hasher3_STATE: [0..10] init 0;

[TWOZH] (Hasher3_STATE=0) -> mR : (Hasher3_STATE'=0);
[TKAMK] (Hasher3_STATE=0) -> lR : (Hasher3_STATE'=0);

endmodule 

module Miner1
b_1 : block {m_1,0;genesis,0};
B_1 : blockchain [{genesis,0;genesis,0}];
c_1 : [0..N] init 0;
setMiner_1 : list [];

Miner1_STATE: [0..10] init 0;

[USZNO] (Miner1_STATE=0) -> hR_1 : (b_1'=createB(b_1,B_1,c_1))&(c_1'=c_1+1)&(Miner1_STATE'=1);
[VQCDY] (Miner1_STATE=1) -> rB: (B_1'=addBlock(B_1,b_1))&(Miner1_STATE'=0);
[QFHZI] (Miner1_STATE=0) -> hR_1 : (Miner1_STATE'=2);
[] (!isEmpty(set_1))&(Miner1_STATE=2) -> 1:(b_1'=extractBlock(set_1))&(Miner1_STATE'=3);
[] !(!isEmpty(set_1))&(Miner1_STATE=2) -> 1:(Miner1_STATE'=4);
[YLUQO] (Miner1_STATE=3) -> 1: (setMiner_1' = addBlockSet(setMiner_1 , b_1))&(Miner1_STATE'=0);
[] (isEmpty(setMiner_1))&(Miner1_STATE=4) -> 1: (Miner1_STATE'=0);
[] !(isEmpty(setMiner_1))&(Miner1_STATE=4) -> 1:(Miner1_STATE'=5);
[] (canBeInserted(B_1,b_1))&(Miner1_STATE=5) -> 1:(B_1'=addBlock(B_1,b_1))&(setMiner_1'=removeBlock(setMiner_1,b_1))&(Miner1_STATE'=0);
[] !(canBeInserted(B_1,b_1))&(Miner1_STATE=5) -> 1:(Miner1_STATE'=0);

endmodule 

module Miner2
b_2 : block {m_2,0;genesis,0};
B_2 : blockchain [{genesis,0;genesis,0}];
c_2 : [0..N] init 0;
setMiner_2 : list [];

Miner2_STATE: [0..10] init 0;

[PWWZM] (Miner2_STATE=0) -> hR_2 : (b_2'=createB(b_2,B_2,c_2))&(c_2'=c_2+1)&(Miner2_STATE'=1);
[HTYOO] (Miner2_STATE=1) -> rB: (B_2'=addBlock(B_2,b_2))&(Miner2_STATE'=0);
[KPDQZ] (Miner2_STATE=0) -> hR_2 : (Miner2_STATE'=2);
[] (!isEmpty(set_1))&(Miner2_STATE=2) -> 1:(b_2'=extractBlock(set_2))&(Miner2_STATE'=3);
[] !(!isEmpty(set_1))&(Miner2_STATE=2) -> 1:(Miner2_STATE'=4);
[ORREB] (Miner2_STATE=3) -> 1: (setMiner_2' = addBlockSet(setMiner_2 , b_2))&(Miner2_STATE'=0);
[] (isEmpty(setMiner_1))&(Miner2_STATE=4) -> 1: (Miner2_STATE'=0);
[] !(isEmpty(setMiner_1))&(Miner2_STATE=4) -> 1:(Miner2_STATE'=5);
[] (canBeInserted(B_1,b_1))&(Miner2_STATE=5) -> 1:(B_2'=addBlock(B_2,b_2))&(setMiner_2'=removeBlock(setMiner_2,b_2))&(Miner2_STATE'=0);
[] !(canBeInserted(B_1,b_1))&(Miner2_STATE=5) -> 1:(Miner2_STATE'=0);

endmodule 

module Miner3
b_3 : block {m_3,0;genesis,0};
B_3 : blockchain [{genesis,0;genesis,0}];
c_3 : [0..N] init 0;
setMiner_3 : list [];

Miner3_STATE: [0..10] init 0;

[TWOZH] (Miner3_STATE=0) -> hR_3 : (b_3'=createB(b_3,B_3,c_3))&(c_3'=c_3+1)&(Miner3_STATE'=1);
[OUTVA] (Miner3_STATE=1) -> rB: (B_3'=addBlock(B_3,b_3))&(Miner3_STATE'=0);
[TKAMK] (Miner3_STATE=0) -> hR_3 : (Miner3_STATE'=2);
[] (!isEmpty(set_1))&(Miner3_STATE=2) -> 1:(b_3'=extractBlock(set_3))&(Miner3_STATE'=3);
[] !(!isEmpty(set_1))&(Miner3_STATE=2) -> 1:(Miner3_STATE'=4);
[GNXWN] (Miner3_STATE=3) -> 1: (setMiner_3' = addBlockSet(setMiner_3 , b_3))&(Miner3_STATE'=0);
[] (isEmpty(setMiner_1))&(Miner3_STATE=4) -> 1: (Miner3_STATE'=0);
[] !(isEmpty(setMiner_1))&(Miner3_STATE=4) -> 1:(Miner3_STATE'=5);
[] (canBeInserted(B_1,b_1))&(Miner3_STATE=5) -> 1:(B_3'=addBlock(B_3,b_3))&(setMiner_3'=removeBlock(setMiner_3,b_3))&(Miner3_STATE'=0);
[] !(canBeInserted(B_1,b_1))&(Miner3_STATE=5) -> 1:(Miner3_STATE'=0);

endmodule 

module Network
set_1 : list [];
set_2 : list [];
set_3 : list [];

Network_STATE: [0..10] init 0;

[VQCDY] (Network_STATE=0) -> 1: (set_2'=addBlockSet(set_2,b_1))&(set_3'=addBlockSet(set_3,b_1))&(Network_STATE'=0);
[YLUQO] (Network_STATE=0) -> 1: (set_1' = removeBlock(set_1,b_1))&(Network_STATE'=0);
[HTYOO] (Network_STATE=0) -> 1: (set_1'=addBlockSet(set_1,b_2))&(set_3'=addBlockSet(set_3,b_2))&(Network_STATE'=0);
[ORREB] (Network_STATE=0) -> 1: (set_2' = removeBlock(set_2,b_2))&(Network_STATE'=0);
[OUTVA] (Network_STATE=0) -> 1: (set_1'=addBlockSet(set_1,b_3))&(set_2'=addBlockSet(set_2,b_3))&(Network_STATE'=0);
[GNXWN] (Network_STATE=0) -> 1: (set_3' = removeBlock(set_3,b_3))&(Network_STATE'=0);

endmodule 

