ctmc
const k;
const T=k*1000;
const double rb ;
const double mR = 1/600;
const double lR = 1-mR;
const double hR1 = 0.25;
const double hR2 = 0.25;
const double hR3 = 0.25;
const double hR4 = 0.25;
const double rB = 1/12.6;
const int N = 100;

module Hasher1

Hasher1_STATE: [0..10] init 0;

[ULHKV]  (Hasher1_STATE=0) -> mR: (Hasher1_STATE'=0);
[ZPUEG]  (Hasher1_STATE=0) -> lR: (Hasher1_STATE'=0);

endmodule 

module Hasher2

Hasher2_STATE: [0..10] init 0;

[IHXET]  (Hasher2_STATE=0) -> mR: (Hasher2_STATE'=0);
[VTOXG]  (Hasher2_STATE=0) -> lR: (Hasher2_STATE'=0);

endmodule 

module Hasher3

Hasher3_STATE: [0..10] init 0;

[TSPZA]  (Hasher3_STATE=0) -> mR: (Hasher3_STATE'=0);
[XMRMU]  (Hasher3_STATE=0) -> lR: (Hasher3_STATE'=0);

endmodule 

module Hasher4

Hasher4_STATE: [0..10] init 0;

[NQZND]  (Hasher4_STATE=0) -> mR: (Hasher4_STATE'=0);
[UORFZ]  (Hasher4_STATE=0) -> lR: (Hasher4_STATE'=0);

endmodule 

module Miner1
b1 : block {m1,0;genesis,0} ;
B1 : blockchain [{genesis,0;genesis,0}];
c1 : [0..N] init 0;
setMiner1 : list [];

Miner1_STATE: [0..10] init 0;

[ULHKV] (Miner1_STATE=0) -> hR1: (b1'=createB(b1,B1,c1))&(c1'=c1+1)&(Miner1_STATE'=1);
[JYLOA] (Miner1_STATE=1) -> rB: (B1'=addBlock(B1,b1))&(Miner1_STATE'=0);
[ZPUEG] (Miner1_STATE=0) -> hR1: (Miner1_STATE'=2);
[] (!isEmpty(set1))&(Miner1_STATE=2) -> 1:r1 : (b1'=extractBlock(set1));
[] !(!isEmpty(set1))&(Miner1_STATE=2) -> 1:(Miner1_STATE'=4);
[ZDJLP] (Miner1_STATE=3) -> 1: (setMiner1' = addBlockSet(setMiner1 , b1))&(Miner1_STATE'=0);
[] (isEmpty(setMiner1))&(Miner1_STATE=4) -> 1: (Miner1_STATE'=0);
[] !(isEmpty(setMiner1))&(Miner1_STATE=4) -> 1:(Miner1_STATE'=5);
[] (canBeInserted(B1,b1))&(Miner1_STATE=5) -> 1:(B1'=addBlock(B1,b1))&(setMiner1'=removeBlock(setMiner1,b1))&(Miner1_STATE'=0);
[] !(canBeInserted(B1,b1))&(Miner1_STATE=5) -> 1:(Miner1_STATE'=0);

endmodule 

module Miner2
b2 : block {m2,0;genesis,0} ;
B2 : blockchain [{genesis,0;genesis,0}];
c2 : [0..N] init 0;
setMiner2 : list [];

Miner2_STATE: [0..10] init 0;

[IHXET] (Miner2_STATE=0) -> hR2: (b2'=createB(b2,B2,c2))&(c2'=c2+1)&(Miner2_STATE'=1);
[RUVHZ] (Miner2_STATE=1) -> rB: (B2'=addBlock(B2,b2))&(Miner2_STATE'=0);
[VTOXG] (Miner2_STATE=0) -> hR2: (Miner2_STATE'=2);
[] (!isEmpty(set2))&(Miner2_STATE=2) -> 1:r2 : (b2'=extractBlock(set2));
[] !(!isEmpty(set2))&(Miner2_STATE=2) -> 1:(Miner2_STATE'=4);
[FULEB] (Miner2_STATE=3) -> 1: (setMiner2' = addBlockSet(setMiner2 , b2))&(Miner2_STATE'=0);
[] (isEmpty(setMiner2))&(Miner2_STATE=4) -> 1: (Miner2_STATE'=0);
[] !(isEmpty(setMiner2))&(Miner2_STATE=4) -> 1:(Miner2_STATE'=5);
[] (canBeInserted(B2,b2))&(Miner2_STATE=5) -> 1:(B2'=addBlock(B2,b2))&(setMiner2'=removeBlock(setMiner2,b2))&(Miner2_STATE'=0);
[] !(canBeInserted(B2,b2))&(Miner2_STATE=5) -> 1:(Miner2_STATE'=0);

endmodule 

module Miner3
b3 : block {m3,0;genesis,0} ;
B3 : blockchain [{genesis,0;genesis,0}];
c3 : [0..N] init 0;
setMiner3 : list [];

Miner3_STATE: [0..10] init 0;

[TSPZA] (Miner3_STATE=0) -> hR3: (b3'=createB(b3,B3,c3))&(c3'=c3+1)&(Miner3_STATE'=1);
[CLBXZ] (Miner3_STATE=1) -> rB: (B3'=addBlock(B3,b3))&(Miner3_STATE'=0);
[XMRMU] (Miner3_STATE=0) -> hR3: (Miner3_STATE'=2);
[] (!isEmpty(set3))&(Miner3_STATE=2) -> 1:r3 : (b3'=extractBlock(set3));
[] !(!isEmpty(set3))&(Miner3_STATE=2) -> 1:(Miner3_STATE'=4);
[OLICS] (Miner3_STATE=3) -> 1: (setMiner3' = addBlockSet(setMiner3 , b3))&(Miner3_STATE'=0);
[] (isEmpty(setMiner3))&(Miner3_STATE=4) -> 1: (Miner3_STATE'=0);
[] !(isEmpty(setMiner3))&(Miner3_STATE=4) -> 1:(Miner3_STATE'=5);
[] (canBeInserted(B3,b3))&(Miner3_STATE=5) -> 1:(B3'=addBlock(B3,b3))&(setMiner3'=removeBlock(setMiner3,b3))&(Miner3_STATE'=0);
[] !(canBeInserted(B3,b3))&(Miner3_STATE=5) -> 1:(Miner3_STATE'=0);

endmodule 

module Miner4
b4 : block {m4,0;genesis,0} ;
B4 : blockchain [{genesis,0;genesis,0}];
c4 : [0..N] init 0;
setMiner4 : list [];

Miner4_STATE: [0..10] init 0;

[NQZND] (Miner4_STATE=0) -> hR4: (b4'=createB(b4,B4,c4))&(c4'=c4+1)&(Miner4_STATE'=1);
[KFDUK] (Miner4_STATE=1) -> rB: (B4'=addBlock(B4,b4))&(Miner4_STATE'=0);
[UORFZ] (Miner4_STATE=0) -> hR4: (Miner4_STATE'=2);
[] (!isEmpty(set4))&(Miner4_STATE=2) -> 1:r4 : (b4'=extractBlock(set4));
[] !(!isEmpty(set4))&(Miner4_STATE=2) -> 1:(Miner4_STATE'=4);
[YNSKJ] (Miner4_STATE=3) -> 1: (setMiner4' = addBlockSet(setMiner4 , b4))&(Miner4_STATE'=0);
[] (isEmpty(setMiner4))&(Miner4_STATE=4) -> 1: (Miner4_STATE'=0);
[] !(isEmpty(setMiner4))&(Miner4_STATE=4) -> 1:(Miner4_STATE'=5);
[] (canBeInserted(B4,b4))&(Miner4_STATE=5) -> 1:(B4'=addBlock(B4,b4))&(setMiner4'=removeBlock(setMiner4,b4))&(Miner4_STATE'=0);
[] !(canBeInserted(B4,b4))&(Miner4_STATE=5) -> 1:(Miner4_STATE'=0);

endmodule 

module Network
set1 : list [];
set2 : list [];
set3 : list [];
set4 : list [];

Network_STATE: [0..10] init 0;

[JYLOA] (Network_STATE=0) -> 1:  (set2'=addBlockSet(set2,b1))&(set3'=addBlockSet(set3,b1))&(set4'=addBlockSet(set4,b1))&(Network_STATE'=0);
[ZDJLP] (Network_STATE=0) -> 1: (set1' = removeBlock(set1,b1))&(Network_STATE'=0);
[RUVHZ] (Network_STATE=0) -> 1:  (set1'=addBlockSet(set1,b2))&(set3'=addBlockSet(set3,b2))&(set4'=addBlockSet(set4,b2))&(Network_STATE'=0);
[FULEB] (Network_STATE=0) -> 1: (set2' = removeBlock(set2,b2))&(Network_STATE'=0);
[CLBXZ] (Network_STATE=0) -> 1:  (set1'=addBlockSet(set1,b3))&(set2'=addBlockSet(set2,b3))&(set4'=addBlockSet(set4,b3))&(Network_STATE'=0);
[OLICS] (Network_STATE=0) -> 1: (set3' = removeBlock(set3,b3))&(Network_STATE'=0);
[KFDUK] (Network_STATE=0) -> 1:  (set1'=addBlockSet(set1,b4))&(set2'=addBlockSet(set2,b4))&(set3'=addBlockSet(set3,b4))&(Network_STATE'=0);
[YNSKJ] (Network_STATE=0) -> 1: (set4' = removeBlock(set4,b4))&(Network_STATE'=0);

endmodule 

