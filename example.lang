PoW := Hasher -> Miner_i
(+[mR*hR_i] "(b_i’=createBlock(Miner_i,c_i,L_i))&(c_i’=c_i+1)&(Miner_i_STATE’=Winner)@(Hasher_i_STATE’=0)" : 
			Miner_i -> Network : "(L_i’=addBlockLedger(L_i,b_i))&(Miner_i_STATE ’=Mine)@foreach k in N_i { set_k’=addBlock(set_k,b_i); }".PoW
 +[lR*hR_i] "(Miner_i_STATE ’=Lost)@(Hasher_i_STATE’=0)" : 
 if "isEmpty(set_i)||isEmpty(setMiner_i)" then {
 				PoW
 }
 else { 
 		if "!isEmpty(set_i)" then { 
 			{"(b_i’=extractBlock(set_i))&(Miner_i_STATE ’=Move)"} Miner_i . Miner_i -> Network : "(setMiner_i ’ = addBlock(setMiner_i , b_i))&(Miner_i_STATE ’=Mine)@set_i’ = removeBlock(set_i,b_i)" . PoW 
 		}
 		else { 
 		{"(b_i’=extractBlock(setMiner_i))&(Miner_i_STATE ’=Add)"} Miner_i. if "canBeInserted(L_i,b_i)" then { 
 																				{"(L_i’=addBlockLedger(L_i,b_i)&(setMiner_i’=removeBlock(setMiner_i,b_i)) &(Miner_i_STATE ’=Mine)"} Miner_i . Pow 
 																			}
 																			else {
 																				PoW
 																			}
 		}
})
	