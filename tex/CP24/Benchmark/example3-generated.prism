// Simple peer-to-peer file distribution protocol based on BitTorrent
// gxn/dxp Jan 2006

ctmc

// N=4 clients, K=5 blocks to be downloaded
// Actually there are N+1=5 clients, one of which has all blocks initially

// Rate of block download for a single source
const double mu=2;

// Rate of download of block i:
// A client can download from the single client which starts with all blocks
// or from anyone that has subsequently downloaded it.
// Total number of concurrent downloads for each block is 4.
formula rate1=mu*(1+min(3,b11+b21+b31+b41));
formula rate2=mu*(1+min(3,b12+b22+b32+b42));
formula rate3=mu*(1+min(3,b13+b23+b33+b43));
formula rate4=mu*(1+min(3,b14+b24+b34+b44));
formula rate5=mu*(1+min(3,b15+b25+b35+b45));
module Client1
Client1 : [0..1] init 0;
b11 : [0..1]; 
b12 : [0..1]; 
b13 : [0..1]; 
b14 : [0..1]; 
b15 : [0..1]; 


[] (Client1=0)  -> rate1 : (b11'=1)&(Client1'=0); 
[] (Client1=0)  -> rate2 : (b12'=1)&(Client1'=0); 
[] (Client1=0)  -> rate3 : (b13'=1)&(Client1'=0); 
[] (Client1=0)  -> rate4 : (b14'=1)&(Client1'=0); 
[] (Client1=0)  -> rate5 : (b15'=1)&(Client1'=0); 
endmodule


module Client2
Client2 : [0..1] init 0;
b21 : [0..1]; 
b22 : [0..1]; 
b23 : [0..1]; 
b24 : [0..1]; 
b25 : [0..1]; 


[] (Client2=0)  -> rate1 : (b21'=1)&(Client2'=0); 
[] (Client2=0)  -> rate2 : (b22'=1)&(Client2'=0); 
[] (Client2=0)  -> rate3 : (b23'=1)&(Client2'=0); 
[] (Client2=0)  -> rate4 : (b24'=1)&(Client2'=0); 
[] (Client2=0)  -> rate5 : (b25'=1)&(Client2'=0); 
endmodule


module Client3
Client3 : [0..1] init 0;
b31 : [0..1]; 
b32 : [0..1]; 
b33 : [0..1]; 
b34 : [0..1]; 
b35 : [0..1]; 


[] (Client3=0)  -> rate1 : (b31'=1)&(Client3'=0); 
[] (Client3=0)  -> rate2 : (b32'=1)&(Client3'=0); 
[] (Client3=0)  -> rate3 : (b33'=1)&(Client3'=0); 
[] (Client3=0)  -> rate4 : (b34'=1)&(Client3'=0); 
[] (Client3=0)  -> rate5 : (b35'=1)&(Client3'=0); 
endmodule


module Client4
Client4 : [0..1] init 0;
b41 : [0..1]; 
b42 : [0..1]; 
b43 : [0..1]; 
b44 : [0..1]; 
b45 : [0..1]; 


[] (Client4=0)  -> rate1 : (b41'=1)&(Client4'=0); 
[] (Client4=0)  -> rate2 : (b42'=1)&(Client4'=0); 
[] (Client4=0)  -> rate3 : (b43'=1)&(Client4'=0); 
[] (Client4=0)  -> rate4 : (b44'=1)&(Client4'=0); 
[] (Client4=0)  -> rate5 : (b45'=1)&(Client4'=0); 
endmodule


// labels
label "done1" = b11+b12+b13+b14+b15 = 5; // client 1 has received all blocks
label "done2" = b21+b22+b23+b24+b25 = 5; // client 2 has received all blocks
label "done3" = b31+b32+b33+b34+b35 = 5; // client 3 has received all blocks
label "done4" = b41+b42+b43+b44+b45 = 5; // client 4 has received all blocks
label "done" = (b11+b12+b13+b14+b15)+(b21+b22+b23+b24+b25)+(b31+b32+b33+b34+b35)+(b41+b42+b43+b44+b45) = 20; // all clients have received all blocks

// reward: fraction of blocks received
rewards "frac_rec"
	true : ((b11+b12+b13+b14+b15)/5)/4;
	true : ((b21+b22+b23+b24+b25)/5)/4;
	true : ((b31+b32+b33+b34+b35)/5)/4;
	true : ((b41+b42+b43+b44+b45)/5)/4;
endrewards

const double T; // time bound

